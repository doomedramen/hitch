services:
  # Test service - runs tests in isolation
  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      # Mount source code read-only to prevent accidental modification
      - .:/workspace:ro
      # Use a volume for Go cache to speed up builds
      - go-cache:/go/pkg/mod
      - go-build-cache:/home/testuser/.cache/go-build
    environment:
      - HITCH_TEST_IN_DOCKER=1
    command: go test -v -race -tags dockertest ./...

  # Lint service - runs golangci-lint
  lint:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/workspace:ro
      - go-cache:/go/pkg/mod
      - golangci-cache:/home/testuser/.cache/golangci-lint
    command: golangci-lint run --timeout=5m

  # Coverage service - generates coverage report
  coverage:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/workspace:ro
      - go-cache:/go/pkg/mod
      - go-build-cache:/home/testuser/.cache/go-build
      - ./coverage.out:/tmp/coverage.out  # Map coverage file to host
      - ./coverage.html:/tmp/coverage.html
    environment:
      - HITCH_TEST_IN_DOCKER=1
    command: sh -c "go test -tags dockertest -coverprofile=/tmp/coverage.out -covermode=atomic ./... && go tool cover -html=/tmp/coverage.out -o /tmp/coverage.html"

  # Integration test service - for full workflow tests
  integration:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/workspace:ro
      - go-cache:/go/pkg/mod
    environment:
      - HITCH_TEST_IN_DOCKER=1
      - INTEGRATION_TESTS=1
    command: go test -v -tags dockertest,integration ./...

volumes:
  go-cache:
  go-build-cache:
  golangci-cache:
